{"version":3,"sources":["Rectangle.js","SingleSelect.js","SortingAlgorithms/HeapSort.js","CreateRectangles.js","SortingAlgorithms/MergeSortPut.js","SortingAlgorithms/QuickSort.js","App.js","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/InsertionSort.js","SortingAlgorithms/SelectionSort.js","serviceWorker.js","index.js","favicon.ico"],"names":["Rectangle","props","rectangleStyle","width","height","margin","backgroundColor","color","className","style","bottom","displayHeight","useStyles","makeStyles","theme","formControl","spacing","minWidth","SingleSelect","len","steps","comparisons","classes","React","useState","open","setOpen","FormControl","InputLabel","htmlFor","title","Select","onClose","onOpen","value","onChange","event","target","inputProps","id","items","map","item","MenuItem","CreateRectangles","rectNum","data","lightUp","maxWidth","Math","floor","rects","i","undefined","rect","includes","push","key","MergeSortPut","arr","setSteps","setStepsCounter","setTotalSteps","setComparisons","mergeSort","location","length","mid","left","slice","right","res","j","merge","QuickSort","copy","quickSortR","start","end","pi","firstVal","lastVal","med","middleVal","pivot","a","b","c","max","min","loc","tmpRect","tmp","partition","HeapSort","heapRoot","swap","heapSortH","console","log","Rainbow","require","createMuiTheme","palette","primary","light","main","dark","secondary","Rect","this","App","button","summary","background","window","addEventListener","setMaxWidth","innerWidth","rainbow","setSpectrum","maxData","sortType","setSortType","setRectNum","speed","setSpeed","setData","totalSteps","stepsCounter","setLightUp","sorting","setSorting","createData","heights","maxRectHeight","round","random","sort","getData","newGradient","setNumberRange","colourAt","updateGradient","x","shuffle","reset","timer","index","instruction","copyData","toPut","toLightUp","Array","fill","y","toSplice","splice","Sort","BubbleSort","inserted","InsertionSort","Number","MAX_SAFE_INTEGER","SelectionSort","useEffect","setInterval","clearInterval","Button","variant","onClick","Card","CardContent","Typography","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.067ce4dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Rectangle.css'\r\n\r\n\r\nexport default function Rectangle(props){\r\n    // var color = \"#86C232\";\r\n    // if(props.color){\r\n    //     color = \"#32C2AA\";\r\n    // }\r\n    var rectangleStyle = {\r\n        width: props.width,\r\n        height: props.height,\r\n        margin: props.margin,\r\n        backgroundColor: props.color,\r\n    }\r\n\r\n    var labelStyle = {\r\n        //left: Math.round(props.width/5),\r\n        bottom: 12,\r\n    }\r\n\r\n    return (\r\n        <span className=\"rectangle\" style={rectangleStyle}>\r\n            <div className=\"label\" style={labelStyle}>\r\n                {props.displayHeight} \r\n                {/* {props.color} */}\r\n            </div>\r\n        </span>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n//This is pulled from Material UI\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n}));\r\n\r\nfunction SingleSelect(props) {\r\n    const classes = useStyles();\r\n    // const [title, setTitle] = React.useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n  \r\n    function handleChange(event) {\r\n      //setTitle(event.target.value);\r\n      props.onChange(event.target.value);\r\n    }\r\n  \r\n    function handleClose() {\r\n      setOpen(false);\r\n    }\r\n  \r\n    function handleOpen() {\r\n      setOpen(true);\r\n    }\r\n  \r\n    return (\r\n        \r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor={props.title}>{props.title}</InputLabel>\r\n                <Select\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    onOpen={handleOpen}\r\n                    value={props.value}\r\n                    onChange={handleChange}\r\n                    inputProps={{\r\n                        title: props.title,\r\n                        id: props.title,\r\n                    }}\r\n                >\r\n                    {props.items.map(item => (\r\n                        <MenuItem value={item}>{item}</MenuItem>\r\n\r\n                    ))}\r\n                    {/* <MenuItem value={10}>Ten</MenuItem>\r\n                    <MenuItem value={20}>Twenty</MenuItem>\r\n                    <MenuItem value={30}>Thirty</MenuItem> */}\r\n                </Select>\r\n            </FormControl>\r\n  \r\n    );\r\n  }\r\n\r\n\r\n  export default SingleSelect;","// HeapSort\r\nvar len;\r\nvar steps;\r\nvar comparisons;\r\n\r\nexport default function HeapSort(arr, setSteps, setStepsCounter, setTotalSteps, setComparisons) {\r\n\t//IT IS CRUCIAL TO MAKE A COPY HERE!!!\r\n\t//YOU CANNOT MANIPULATE THE ORIGINAL ARRAY!!!\r\n\tlet copy = [...arr];\r\n    //var stepsCounter = 0;\r\n    len = arr.length\r\n    steps = [];\r\n    comparisons = 0;\r\n\r\n\theapSortH(copy);\r\n\r\n\r\n\tconsole.log(copy);\r\n\tsetSteps(steps);\r\n\tsetStepsCounter(steps.length);\r\n    setTotalSteps(steps.length);\r\n    setComparisons(comparisons);\r\n}\r\n\r\nfunction heapSortH(arr){\r\n    for(var i = Math.floor(len / 2); i >= 0; --i) {\r\n        ++comparisons;\r\n        heapRoot(arr,i);\r\n    }\r\n\r\n    for(var i = arr.length - 1; i > 0; --i) {\r\n        swap(arr, 0, i);\r\n        steps.push(['s',0,i]);\r\n\r\n        --len;\r\n        ++comparisons;\r\n        heapRoot(arr,0);\r\n\r\n    }\r\n}\r\n\r\nfunction heapRoot(arr, i) {\r\n    var left = 2 * i + 1;\r\n    var right = 2 * i + 2;\r\n    var max = i;\r\n\r\n    if (left < len && arr[left].height > arr[max].height) {\r\n        max = left;\r\n    }\r\n\r\n    if (right < len && arr[right].height > arr[max].height) {\r\n        max = right;\r\n    }\r\n\r\n    if (max != i) {\r\n        ++comparisons;\r\n        swap(arr, i, max);\r\n        steps.push(['s',i,max]);\r\n        heapRoot(arr, max);\r\n    }\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n    var tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}","import React from 'react';\r\nimport Rectangle from './Rectangle.js';\r\n// import './Rectangle.css'\r\n\r\n// To create all the Rectangles that is used for the data\r\n\r\nexport default function CreateRectangles(props){\r\n    // var style = {\r\n    //     width: props.width,\r\n    //     height: props.height,\r\n    //     margin: props.margin,\r\n    // }\r\n    var rectNum = props.rectNum;\r\n    var data = props.data;\r\n    var lightUp = props.lightUp;\r\n    var maxWidth = props.maxWidth;\r\n\r\n    \r\n    var margin = 0.5;\r\n    var width = Math.floor(maxWidth/rectNum);\r\n\r\n    var rects = [];\r\n\r\n    for(var i = 0; i < rectNum; ++i){\r\n        if (data === undefined || data[i] === undefined) {\r\n            continue;\r\n        }\r\n        //console.log(i);\r\n        var rect = data[i];\r\n        var height = rect.height;\r\n        var width = width;\r\n        var color = rect.color;\r\n        var displayHeight = height;\r\n        if (height == 0) {\r\n            displayHeight = \"\";\r\n        }\r\n        //props.lightUp.includes(i)\r\n        if (lightUp.includes(i)){\r\n            //console.log(i, props.lightUp);\r\n            rects.push(<Rectangle key={i} width={width} height={height} margin={margin} displayHeight={displayHeight} color={color}/>);\r\n            \r\n        } else {\r\n            rects.push(<Rectangle key={i} width={width} height={height} margin={margin} displayHeight={displayHeight} color={color}/>);\r\n        }\r\n    }\r\n\r\n    return <span> {rects} </span>;\r\n}","// MergeSort\r\n\r\nexport default function MergeSortPut(arr, setSteps, setStepsCounter, setTotalSteps, setComparisons) {\r\n\t//IT IS CRUCIAL TO MAKE A COPY HERE!!!\r\n\t//YOU CANNOT MANIPULATE THE ORIGINAL ARRAY!!!\r\n\tlet copy = [...arr];\r\n\t//var stepsCounter = 0;\r\n\tvar steps = [];\r\n\tvar comparisons = [0];\r\n\r\n\r\n\tmergeSort(copy, 0, steps, comparisons);\r\n\r\n\r\n\t//console.log(steps);\r\n\tsetSteps(steps);\r\n\tsetStepsCounter(steps.length);\r\n\tsetTotalSteps(steps.length);\r\n\tsetComparisons(comparisons[0]);\r\n}\r\n\r\nfunction merge(left, right, location, steps, comparisons) {\r\n\tvar res = [];\r\n\tvar i = 0, j = 0;\r\n\r\n\twhile (true) {\r\n\t\t++comparisons[0];\r\n\t\tif (i >= left.length) {\r\n\t\t\t// [\"instruction\", index, toPut]\r\n\t\t\t// \"pa2\" stands for \"put array 2\"\r\n\t\t\t// put the array toPut at index,\r\n\t\t\t// overwriting what is there without increasing original array length\r\n\t\t\tsteps.push([\"pa\", res.length + location, right.slice(j)]);\r\n\t\t\tres.push(...right.slice(j));\r\n\t\t\tbreak;\r\n\t\t} else if (j >= right.length) {\r\n\t\t\tsteps.push([\"pa\", res.length + location, left.slice(i)]);\r\n\t\t\tres.push(...left.slice(i));\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (left[i].height < right[j].height) {\r\n\t\t\t// [\"instruction\", index, toPut]\r\n\t\t\t// \"p2\" stands for \"put 2\"\r\n\t\t\t// put what is at toPut at the index of heightsBottom \r\n\t\t\tsteps.push([\"p\", res.length + location, left[i]]);\r\n\t\t\tres.push(left[i]);\r\n\t\t\t++i;\r\n\t\t} else {\r\n\t\t\tsteps.push([\"p\", res.length + location, right[j]]);\r\n\t\t\tres.push(right[j]);\r\n\t\t\t++j;\r\n\t\t}\r\n\r\n\t}\r\n\t// put the whole sorted array into the original data\r\n\t// steps.push([\"pa\", location, res]);\r\n\treturn res;\r\n}\r\n\r\n//range is [start,end)\r\nfunction mergeSort(arr, location, steps, comparisons) {\r\n\t//console.log({ arr });\r\n\tif (arr.length == 1 || arr.length == 0) {\r\n\t\treturn arr;\r\n\t}\r\n\r\n\tvar mid = Math.floor((0 + arr.length) / 2);\r\n\tvar left = mergeSort(arr.slice(0, mid), location, steps, comparisons);\r\n\tvar right = mergeSort(arr.slice(mid, arr.length), location+mid, steps, comparisons);\r\n\r\n\treturn merge(left, right, location, steps, comparisons);\r\n}","// QuickSort\r\n\r\nexport default function QuickSort(arr, setSteps, setStepsCounter, setTotalSteps, setComparisons) {\r\n\t//IT IS CRUCIAL TO MAKE A COPY HERE!!!\r\n\t//YOU CANNOT MANIPULATE THE ORIGINAL ARRAY!!!\r\n\tlet copy = [...arr];\r\n\t//var stepsCounter = 0;\r\n    var steps = [];\r\n    var comparisons = [0];\r\n\r\n\tquickSortR(copy, 0, copy.length - 1, steps, comparisons);\r\n\r\n\r\n\t//console.log(steps);\r\n\tsetSteps(steps);\r\n\tsetStepsCounter(steps.length);\r\n    setTotalSteps(steps.length);\r\n    setComparisons(comparisons[0]);\r\n}\r\n\r\nfunction quickSortR(arr, start, end, steps, comparisons){\r\n    if (start < end){\r\n        var pi = partition(arr, start, end, steps, comparisons);\r\n\r\n        quickSortR(arr, start, pi - 1, steps, comparisons);\r\n        quickSortR(arr, pi + 1, end, steps, comparisons);\r\n    }\r\n}\r\n\r\nfunction partition(arr, start, end, steps, comparisons){\r\n    // Take a value to pivot around\r\n    var firstVal = arr[start].height;\r\n    var lastVal = arr[end].height;\r\n    var med = Math.floor((start + end) / 2);\r\n    var middleVal = arr[med].height;\r\n\r\n    var pivot = median(firstVal, lastVal, middleVal);\r\n    var loc = (pivot == firstVal) ? start : (pivot == lastVal) ? end : med;\r\n    steps.push(['s', loc, end]);\r\n    var tmpRect = arr[loc]\r\n    arr[loc] = arr[end];\r\n    arr[end] = tmpRect;\r\n\r\n    // Only pivot the last element\r\n    // var pivot = arr[end].height;\r\n    // var tmpRect = arr[end];\r\n\r\n    var i = start;\r\n\r\n    for (var j = start; j < end; ++j) {\r\n        // console.log([arr[j].height, pivot, i , j]);\r\n        ++comparisons[0];\r\n        if (arr[j].height < pivot) {\r\n            if (i != j) {\r\n                steps.push(['s', i, j]);\r\n                let tmp = arr[j];\r\n                arr[j] = arr[i];\r\n                arr[i] = tmp;\r\n            }\r\n            ++i;\r\n        }\r\n    }\r\n\r\n    steps.push(['s', i, end]);\r\n    arr[end] = arr[i];\r\n    arr[i] = tmpRect;\r\n    return i;\r\n\r\n}\r\n\r\n// Find the median of three values\r\nfunction median(a, b, c){\r\n    return (a+b+c) - Math.max(a,b,c) - Math.min(a,b,c);\r\n}","import React, { useEffect } from 'react';\r\nimport logo from './favicon.ico';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nimport './App.css';\r\n\r\nimport Rectangle from './Rectangle.js';\r\nimport SingleSelect from './SingleSelect.js';\r\nimport CreateRectangles from './CreateRectangles.js';\r\n\r\nimport BubbleSort from './SortingAlgorithms/BubbleSort.js';\r\nimport InsertionSort from './SortingAlgorithms/InsertionSort';\r\nimport SelectionSort from './SortingAlgorithms/SelectionSort';\r\n// import MergeSortSwitch from './SortingAlgorithms/MergeSortSwitch.js';\r\nimport MergeSortPut from './SortingAlgorithms/MergeSortPut.js';\r\nimport QuickSort from './SortingAlgorithms/QuickSort.js';\r\nimport HeapSort from './SortingAlgorithms/HeapSort.js';\r\n\r\n\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport { createDeflate } from 'zlib';\r\n\r\n// For the nice looking spectrum of colours\r\nvar Rainbow = require('rainbowvis.js');\r\n\r\n// Material UI main colours, light green and light blue\r\nconst theme = createMuiTheme({\r\n\tpalette: {\r\n\t\tprimary: {\r\n\t\t\tlight: '#98d049',\r\n\t\t\tmain: '#86C232',\r\n\t\t\tdark: '#70a22a',\r\n\t\t},\r\n\t\tsecondary: {\r\n\t\t\tlight: '#12e2e2\"',\r\n\t\t\tmain: '#32c3c3',\r\n\t\t\tdark: '#43b1b1',\r\n\t\t}\r\n\t},\r\n\r\n})\r\n\r\n// Rectangle object for the data points\r\nclass Rect {\r\n\tconstructor(height,color) {\r\n\t\tthis.height = height;\r\n\t\tthis.color = color;\r\n\t}\r\n}\r\n\r\n/**\r\n * Shuffles array in place.\r\n * @param {Array} a items An array containing the items.\r\n * From StackOverflow\r\n */\r\nfunction shuffle(a) {\r\n    var j, x, i;\r\n    for (i = a.length - 1; i > 0; i--) {\r\n        j = Math.floor(Math.random() * (i + 1));\r\n        x = a[i];\r\n        a[i] = a[j];\r\n        a[j] = x;\r\n    }\r\n    return a;\r\n}\r\n\r\n// Generates a random list of Rects, called after the number of rectangles needed\r\n// has changed or when loading the page for the first time.\r\nfunction getData(rectNum, maxRectHeight) {\r\n\tvar res = [];\r\n\tfor (var i = 0; i < rectNum; ++i) {\r\n\t\tres.push(1 + Math.round(Math.random() * maxRectHeight));\r\n\t}\r\n\tres.sort(function(a, b){return a-b});\r\n\t//console.log(res);\r\n\treturn res;\r\n}\r\n\r\n\r\n// Goal: To create a visual realization of sorting algorithms.\r\n// Create rectangles as data points.\r\n// 1. Line up rectangles at the bottom\r\n// 2. The heights of rectangles is based on their data\r\n// 3. Using whatever sorting algorithm, show step by step how the data transforms\r\n\r\nfunction App() {\r\n\r\n\t// CSS for elements\r\n\t// TODO: either only use this for css or only use the App.css page to put everything together\r\n\tconst useStyles = makeStyles(theme => ({\r\n\t\tbutton: {\r\n\t\t\t// background: '#86C232',\r\n\t\t\tmargin: \"5px\",\r\n\t\t\tcolor: \"white\",\r\n\t\t},\r\n\t\tsummary: {\r\n\t\t\tbackground: 'linear-gradient(45deg, #86C232 30%, #32c3c3 90%)',\r\n\t\t\tmargin: \"auto\",\r\n\t\t\tcolor: \"white\",\r\n\t\t\tminWidth: \"15vw\"\r\n\t\t},\r\n\t}));\r\n\r\n\t// Upon resizing window, change the width of each rectangle\r\n\twindow.addEventListener(\"resize\", updateWidth);\r\n\r\n\t// Generate the spectrum of colours, white, green and blue\r\n\tvar rainbow = new Rainbow();\r\n\trainbow.setSpectrum('#ffffff', \"#86C232\", \"#32c3c3\");\r\n\t\r\n\r\n\t//const maxWidth = 1200;\r\n\tvar maxData = 200;\r\n\tconst [maxWidth, setMaxWidth] = React.useState(window.innerWidth * 0.7);\r\n\r\n\r\n\t// filters, set default values\r\n\tconst [sortType, setSortType] = React.useState(\"QuickSort\");\r\n\tconst [rectNum, setRectNum] = React.useState(50);\r\n\tconst [speed, setSpeed] = React.useState(1);\r\n\r\n\t// data tracking\r\n\tconst [data, setData] = React.useState([]);\r\n\t// const [dataBottom, setDataBottom] = React.useState(new Array(rectNum).fill(0));\r\n\tconst [steps, setSteps] = React.useState([]);\r\n\tconst [totalSteps, setTotalSteps] = React.useState(0);\r\n\tconst [stepsCounter, setStepsCounter] = React.useState(0);\r\n\t// Used to have a lightup feature that changed the colour of the item when it was being moved\r\n\t// Dropped for the spectrum instead.\r\n\tconst [lightUp, setLightUp] = React.useState([]);\r\n\t// const [lightUpBottom, setLightUpBottom] = React.useState([]);\r\n\tconst [sorting, setSorting] = React.useState(false);\r\n\tconst [comparisons, setComparisons] = React.useState(0);\r\n\r\n\t// MaxWidth is based on width of window\r\n\tfunction updateWidth() {\r\n\t\tsetMaxWidth(window.innerWidth * 0.7);\r\n\t}\r\n\r\n\t// Gradient values is based on the number of rectangles\r\n\tfunction updateGradient() {\r\n\t\trainbow.setNumberRange(0, rectNum); \r\n\t\tvar res = [];\r\n\t\tfor(var i = 0; i < rectNum; ++i) {\r\n\t\t\tres.push(\"#\" + rainbow.colourAt(i));\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\t// Generate the collection of Rectangles with the right colour\r\n\tfunction createData(){\r\n\t\t//console.log(rectNum);\r\n\t\tvar heights = getData(rectNum, maxData);\r\n\t\tvar newGradient = updateGradient();\r\n\t\tvar res = [];\r\n\t\tfor(var i = 0; i < rectNum; ++i){\r\n\t\t\tlet tmp = new Rect(heights[i], newGradient[i]);\r\n\t\t\tres.push(tmp);\r\n\t\t}\r\n\r\n\t\tres = shuffle(res);\r\n\t\t// console.log(JSON.stringify(res));\r\n\t\t// setGradient(newGradient);\r\n\t\tsetData(res);\r\n\t}\r\n\r\n\t// Used when filters are changed\r\n\tfunction reset(){\r\n\t\tsetSorting(false);\r\n\t\t// setDataBottom(new Array(rectNum).fill(new Rect(0,Math.round(maxWidth/rectNum),0)));\r\n\t\tsetLightUp([]);\r\n\t\t// setLightUpBottom([]);\r\n\r\n\t}\r\n\r\n\t// The core mechanic of the \"animation\", the timer is called every interval to perform\r\n\t// an instruction. This allows for \"animation\" because instructions are not done all at once.\r\n\t// Note: instructions ending with 2 is legacy because I reverted back to using one graph\r\n\tfunction timer() {\r\n\t\t// console.log(steps);\r\n\t\t// console.log(totalSteps);\r\n\t\t// console.log(stepsCounter);\r\n\r\n\t\tlet index = totalSteps - stepsCounter;\r\n\t\tlet instruction = steps[index][0];\r\n\t\tlet copyData = [...data]\r\n\t\t// let copyDataBottom = [...dataBottom]\r\n\r\n\t\tif (instruction == 's') {\r\n\t\t\t// Switch:\r\n\t\t\t// [\"instruction\", index1, index2]\r\n\t\t\t// Switch what is at index1 with index2\r\n\t\t\tlet a = steps[index][1];\r\n\t\t\tlet b = steps[index][2];\r\n\r\n\t\t\tlet tmp = copyData[a];\r\n\t\t\tcopyData[a] = copyData[b];\r\n\t\t\tcopyData[b] = tmp;\r\n\t\t\t\r\n\t\t\tsetLightUp([a, b]);\r\n\t\t} else if (instruction == 'p') {\r\n\t\t\t// Put:\r\n\t\t\t// [\"instruction\", index, toPut]\r\n\t\t\t// Put what is toPut at index, replacing old element\r\n\t\t\tlet location = steps[index][1];\r\n\t\t\tlet toPut = steps[index][2];\r\n\r\n\t\t\tcopyData[location] = toPut;\r\n\r\n\t\t\tsetLightUp([location]);\r\n\t\t} else if (instruction == 'p2') {\r\n\t\t\t// Put Bottom:\r\n\t\t\t// [\"instruction\", index, toPut]\r\n\t\t\t// Put what is toPut at second graph's index, replacing old element\r\n\t\t\tlet location = steps[index][1];\r\n\t\t\tlet toPut = steps[index][2];\r\n\r\n\t\t\t// copyDataBottom[location] = toPut;\r\n\t\t\t// setLightUpBottom([location]);\r\n\t\t} else if (instruction == 'pa') {\r\n\t\t\t// Put Array:\r\n\t\t\t// [\"instruction\", index, toPut[]]\r\n\t\t\t// Put what is toPut[] at index, replacing old elements\r\n\t\t\tlet location = steps[index][1];\r\n\t\t\tlet toPut = steps[index][2];\r\n\r\n\t\t\tcopyData = [\r\n\t\t\t\t...copyData.slice(0,location),\r\n\t\t\t\t...toPut,\r\n\t\t\t\t...copyData.slice(location + toPut.length)\r\n\t\t\t];\r\n\t\t\t\r\n\t\t\t// generate an array from starting location with length identical to toPut\r\n\t\t\tlet toLightUp = Array(toPut.length).fill(location).map((x, y) => x + y);\r\n\t\t\tsetLightUp(toLightUp);\r\n\t\t} else if (instruction == 'pa2') {\r\n\t\t\t// Put Bottom Array:\r\n\t\t\t// [\"instruction\", index, toPut[]]\r\n\t\t\t// Put what is toPut[] at second graph's index, replacing old elements\r\n\t\t\tlet location = steps[index][1];\r\n\t\t\tlet toPut = steps[index][2];\r\n\r\n\t\t\t// copyDataBottom = [\r\n\t\t\t// \t...copyDataBottom.slice(0,location),\r\n\t\t\t// \t...toPut,\r\n\t\t\t// \t...copyDataBottom.slice(location + toPut.length)\r\n\t\t\t// ];\r\n\t\t\t\r\n\t\t\tlet toLightUp = Array(toPut.length).fill(location).map((x, y) => x + y);\r\n\t\t\t// setLightUpBottom(toLightUp);\r\n\t\t} else if (instruction == 'sp') {\r\n\t\t\t// Splice Bottom Array:\r\n\t\t\t// [\"instruction\", index, toSplice]\r\n\t\t\t// Splice what is toSplice at index, shifting existing elements\r\n\t\t\tlet location = steps[index][1];\r\n\t\t\tlet toSplice = steps[index][2];\r\n\r\n\t\t\tcopyData.splice(location, 0, toSplice);\r\n\t\t\t\r\n\t\t\t// setLightUpBottom(toLightUp);\r\n\t\t}\r\n\r\n\t\t// console.log(copyData);\r\n\t\tsetData(copyData);\r\n\t\t// setDataBottom(copyDataBottom);\r\n\t\tsetStepsCounter(stepsCounter - 1);\r\n\t};\r\n\r\n\t// setInterval is triggered when steps are given\r\n\t// Also if filters are changed, sorting needs to stop\r\n\tuseEffect(() => {\r\n\t\tif (stepsCounter <= 0 || !sorting) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst id = setInterval(timer, speed);\r\n\t\treturn () => clearInterval(id);\r\n\t},\r\n\t\t[stepsCounter, sorting]\r\n\t);\r\n\r\n\t// When rectNum changes, need to generate new Data\r\n\t// TODO: simply make a handleRectNumChange() and put createData() instead\r\n\tuseEffect(() => {\r\n\t\t// setGradient(updateGradient());\r\n\t\t// setData(createData());\t\t\r\n\t\tcreateData();\r\n\t},\r\n\t\t[rectNum]\r\n\t);\r\n\r\n\t// trigger different sorting algorithms based on filter\r\n\tfunction Sort(heights, setSteps, setStepsCounter, setTotalSteps, setComparisons) {\r\n\t\tsetSorting(true);\r\n\t\tif (sortType == \"BubbleSort\") {\r\n\t\t\tBubbleSort(heights, setSteps, setStepsCounter, setTotalSteps, setComparisons);\r\n\t\t} else if (sortType == \"InsertionSort\") {\r\n\t\t\tInsertionSort(heights, setSteps, setStepsCounter, setTotalSteps, setComparisons);\r\n\t\t}  else if (sortType == \"SelectionSort\") {\r\n\t\t\tSelectionSort(heights, setSteps, setStepsCounter, setTotalSteps, setComparisons);\r\n\t\t// } else if (sortType == \"MergeSort(Legacy)\") {\r\n\t\t\t// MergeSortSwitch(heights, setSteps, setStepsCounter, setTotalSteps, setComparisons);\r\n\t\t} else if (sortType == \"MergeSort\") {\r\n\t\t\tMergeSortPut(heights, setSteps, setStepsCounter, setTotalSteps, setComparisons);\r\n\t\t} else if (sortType == \"QuickSort\") {\r\n\t\t\tQuickSort(heights, setSteps, setStepsCounter, setTotalSteps, setComparisons);\r\n\t\t}  else if (sortType == \"HeapSort\") {\r\n\t\t\tHeapSort(heights, setSteps, setStepsCounter, setTotalSteps, setComparisons);\r\n\t\t} \r\n\t}\r\n\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<MuiThemeProvider theme={theme}>\r\n\r\n\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<div className=\"App-header\">\r\n\t\t\t\t\t{/* <img src={logo} alt=\"Logo\" style={{width:80, height:80}}/> */}\r\n\t\t\t\t\t{/* {JSON.stringify(maxWidth)} */}\r\n\t\t\t\t\t<SingleSelect\r\n\t\t\t\t\t\ttitle={\"Type of Sort\"}\r\n\t\t\t\t\t\titems={[\"BubbleSort\", \"SelectionSort\", \"InsertionSort\",\r\n\t\t\t\t\t\t\t\"MergeSort\", \"HeapSort\", \"QuickSort\"]}\r\n\t\t\t\t\t\tvalue={sortType}\r\n\t\t\t\t\t\tonChange={(sortType) => { reset(); setSortType(sortType); }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<SingleSelect\r\n\t\t\t\t\t\ttitle={\"Data Points\"}\r\n\t\t\t\t\t\titems={[10, 25, 50, 100, 250]}\r\n\t\t\t\t\t\tvalue={rectNum}\r\n\t\t\t\t\t\tonChange={(rectNum) => { reset(); setRectNum(rectNum); }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<SingleSelect\r\n\t\t\t\t\t\ttitle={\"Speed(ms)\"}\r\n\t\t\t\t\t\titems={[1, 10, 100, 500]}\r\n\t\t\t\t\t\tvalue={speed}\r\n\t\t\t\t\t\tonChange={(speed) => { reset(); setSpeed(speed); }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\tonClick={() => { reset(); createData(); }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tRandomize\r\n          \t\t\t</Button>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tclassName={classes.button}\r\n\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\tcolor=\"secondary\"\r\n\t\t\t\t\t\tonClick={() => Sort(data, setSteps, setStepsCounter, setTotalSteps, setComparisons)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSort\r\n          \t\t\t</Button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"App-main\">\r\n\t\t\t\t\t\r\n\t\t\t\t\t{/* <Clock></Clock> */}\r\n\t\t\t\t\t<CreateRectangles\r\n\t\t\t\t\t\trectNum={rectNum}\r\n\t\t\t\t\t\tmaxWidth={maxWidth}\r\n\t\t\t\t\t\tdata={data}\r\n\t\t\t\t\t\tlightUp={lightUp}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t</CreateRectangles>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<div className=\"App-summary\">\r\n\t\t\t\t\t<Card className={classes.summary}>\r\n\t\t\t\t\t\t<CardContent className=\"summary-text\">\r\n\r\n\t\t\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t\tIterations:\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t{/* <Typography className={classes.pos} color=\"textSecondary\">\r\n\t\t\t\t\t\t\tadjective\r\n\t\t\t\t\t\t\t</Typography> */}\r\n\t\t\t\t\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t\t\t\t{comparisons}\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* easy debug */}\r\n\t\t\t\t{/* {JSON.stringify(steps)} */}\r\n\r\n\t\t\t\t{/* Used to be used to show MergeSort better but is now unused. */}\r\n\t\t\t\t{/* <div className=\"App-main\">\r\n\t\t\t\t\t<CreateRectangles\r\n\t\t\t\t\t\trectNum={rectNum}\r\n\t\t\t\t\t\tmaxWidth={maxWidth}\r\n\t\t\t\t\t\tdata={dataBottom}\r\n\t\t\t\t\t\tlightUp={lightUpBottom}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t</CreateRectangles>\r\n\r\n\t\t\t\t</div> */}\r\n\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</MuiThemeProvider>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// BubbleSort\r\n\r\nexport default function BubbleSort(arr, setSteps, setStepsCounter, setTotalSteps, setComparisons){\r\n    //IT IS CRUCIAL TO MAKE A COPY HERE!!!\r\n    //YOU CANNOT MANIPULATE THE ORIGINAL ARRAY!!!\r\n    let copy = [...arr];\r\n\r\n    //var stepsCounter = 0;\r\n    var steps = [];\r\n    var comparisons = 0;\r\n\r\n    for(var j = 0; j < copy.length - 1;++j){\r\n        for(var i = 0; i < copy.length-1-j; ++i){\r\n            ++comparisons;\r\n            if(copy[i].height > copy[i+1].height){\r\n                var tmp = copy[i];\r\n                copy[i] = copy[i+1];\r\n                copy[i+1] = tmp;\r\n                \r\n                //++stepsCounter;\r\n\r\n                // 's' is for switch\r\n                // switch what is at i with i+1\r\n                steps.push(['s',i,i+1]);\r\n\r\n            }\r\n        }\r\n    }\r\n    // console.log(copy);\r\n    setSteps(steps);\r\n    setStepsCounter(steps.length);\r\n    setTotalSteps(steps.length);\r\n    setComparisons(comparisons);\r\n}\r\n","// InsertionSort\r\n\r\nexport default function InsertionSort(arr, setSteps, setStepsCounter, setTotalSteps, setComparisons){\r\n    //IT IS CRUCIAL TO MAKE A COPY HERE!!!\r\n    //YOU CANNOT MANIPULATE THE ORIGINAL ARRAY!!!\r\n    let copy = [...arr];\r\n\r\n    //var stepsCounter = 0;\r\n    var steps = [];\r\n    var inserted = [];\r\n    var comparisons = 0;\r\n\r\n    for(var i = 0; i < copy.length;++i){\r\n        for(var j = 0; j < inserted.length; ++j){\r\n            ++comparisons;\r\n            if(copy[i].height <= inserted[j].height){\r\n                break;\r\n            }\r\n        }\r\n        // [\"instruction\", index, toSplice]\r\n        // \"sp\" stands for \"splice\"\r\n        // add what is toSplice by splicing it into dataBottom\r\n        steps.push([\"sp\", j, copy[i]]);\r\n        inserted.splice(j,0,copy[i]);\r\n    }\r\n    // console.log(copy);\r\n    setSteps(steps);\r\n    setStepsCounter(steps.length);\r\n    setTotalSteps(steps.length);\r\n    setComparisons(comparisons);\r\n}\r\n","// SelectionSort\r\n\r\nexport default function SelectionSort(arr, setSteps, setStepsCounter, setTotalSteps, setComparisons){\r\n    //IT IS CRUCIAL TO MAKE A COPY HERE!!!\r\n    //YOU CANNOT MANIPULATE THE ORIGINAL ARRAY!!!\r\n    let copy = [...arr];\r\n\r\n    //var stepsCounter = 0;\r\n    var steps = [];\r\n    var comparisons = 0;\r\n\r\n\r\n    for(var i = 0; i < copy.length - 1;++i){\r\n        var min = Number.MAX_SAFE_INTEGER;\r\n        var loc = 0;\r\n        for(var j = i; j < copy.length; ++j){\r\n            ++comparisons;\r\n            if(copy[j].height <= min){\r\n                min = copy[j].height;\r\n                loc = j;\r\n            }\r\n        }\r\n        // [\"instruction\", index, toSplice]\r\n        // \"sp\" stands for \"splice\"\r\n        // add what is toSplice by splicing it into dataBottom\r\n        steps.push([\"s\", i, loc]);\r\n        var tmp = copy[i];\r\n        copy[i] = copy[loc];\r\n        copy[loc] = tmp;\r\n    }\r\n    // console.log(copy);\r\n    setSteps(steps);\r\n    setStepsCounter(steps.length);\r\n    setTotalSteps(steps.length);\r\n    setComparisons(comparisons);\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/favicon.ad79fbfb.ico\";"],"sourceRoot":""}